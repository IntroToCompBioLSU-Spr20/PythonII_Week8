{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A Null Model for Dispersal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's imagine that we're behavioral ecologists interested in how individuals of some species mov$
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To begin, we'll need to import two Python modules with functions that we'll use later on (otherw$
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that when you import a module, no output is typically displayed. Everything should be good $
    "\n",
    "Now we're going to do something similar with the `copy` module. But instead of importing the ent$
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
    "outputs": [],
   "source": [
    "days = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also set a starting position for each individual as `[0,0]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pos = [0,0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The notation we'll use for an individual's position in the grid is to have the first number in the pair represent the horizontal axis, $
    "\n",
    "We'll also want to keep an ongoing log of where the individual is each day, so we'll start an empty list called `posLog`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "posLog = []"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last step in our setup will be to make the individual's starting position the first entry in our position log."
 ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "posLog.append( copy(pos) )\n",
    "posLog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the first place where we've used the `copy()` function from the `copy` module. The reason we're using it is because we're going$
    "\n",
    "If this doesn't make sense, try taking a look back at the notes from last week. Or just make up an example and try it yourself! Create $
    "\n",
    "Also, take a look at `posLog` currently. What is it? It's a list of lists! But so far, it only has one list in it - our starting positi$
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
  "source": [
    "## Simulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's where the rubber meets the road. We need to draw a random direction of movement for each day in our simulation, and update our p$
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for days in (0,10):  # Loop over the specified number of days\n",
    "    move = random.choice(dirs) # Randomly draws a direction - u, d, l, or r\n",
    "    if move == \"l\...: # Test what direction was drawn and update position accordingly\n",
    "           pos[1] = int(pos[1]) + 1\n",
    "    elif move == \"l\":\d",
    "           pos[1] = int(pos[1]) - 1\n",
    "    elif move == \"d\":\r",
                pos[0] = int(pos[0]) + 1\n",
    "    else:\n",
  "        print(\"Something's wrong! Direction is not u, d, l, or r.\")\n",
    "    posLog.append( copy(pos) )"

   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, I'm going to include a custom function that takes all the pairs of coordinates in `posLog` and makes a little map drawn entirely w$
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def drawMap(posLog):\n",
    "    \"\"\"Function to draw an ascii map.\"\"\"\n",
    "    \n",
    "    map = []\n",

   "\n",
    "    absMax = 0\n",
    "    for pos in posLog:\n",
    "        if abs(pos[0]) > absMax:\n",
    "            absMax = abs(pos[0])\n",
    "        if abs(pos[1]) > absMax:\n",
    "            absMax = abs(pos[1])\n",
    "    size = (absMax * 2) + 1\n",
    "\n",
    "    for _ in range(size):\n",
    "        map.append([])\n",
    "\n",
    "    for row in map:\n",
    "        for i in range(size):\n",
    "            row.append(\"-\")\n",
    "\n",
    "    for pos in posLog:\n",
    "        map[-1*(pos[1]+absMax+1)][pos[0]+absMax] = \"*\"\n",
    "\n",
    "    for row in map:\n",
    "        rStr = \"\"\n",
    "        for c in row:\n",
    "            rStr += str(c)\n",
    "        print(rStr)\n"
   ]
  },
 "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's draw a map! We'll execute our new function and pass it the position log as an argument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "drawMap(posLog)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In these maps, the dashes (`-`) represent the entire landscape background, and the asterisks (`*`) represent the grid cells visited by $
    "\n",
    "Now, look at the last position of the individual (i.e., the last entry in `posLog` - hint, try `posLog[-1]`). Write some code to calcul$
   ]
  },
  {
 "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "posLog[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write code here to calculate distance from the starting point - [0,0]."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How do the final distances that individuals have moved from where they originally started compare to the number of days they've been moving?\n",
    "\n",
    "Run your simulations a bunch of times and record the distances. To rerun the simulation, first select the \"Cell\" dropdown menu from the top, then select \"All Output\", then select \"Cle$
    "\n",
    "What if you collected actual data from your species of interest and their final positions after __10 days__ were represented by the following coordinates. Can the random model of movement $
   "\n",
    "- [1,1]\n",
    "- [1,3]\n",
    "- [-1,5]\n",
    "- [2,6]\n",
    "- [1,-1]\n",
    "- [2,4]\n",
    "- [-2,4]\n",
    "- [1,9]\n",
    "- [2,4]\n",
    "- [-2,2]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",

