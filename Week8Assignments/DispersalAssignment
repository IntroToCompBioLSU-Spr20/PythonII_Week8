A Null Model for Dispersal
Setup
Let's imagine that we're behavioral ecologists interested in how individuals of some species move around a landscape. To keep things simple at the beginning, we can think about the landscape as a grid of cells (the actual size of our cells would obviously depend on what species we're interested in). Our null model is that each individual moves in a random direction (up, down, left, or right) for a fixed distance (1 grid cell) each day. We'd like to run a simulation to help us gain some intuition for the predictions of our model regarding how far away each individual might be from where they started after a certain number of days.

To begin, we'll need to import two Python modules with functions that we'll use later on (otherwise, we wouldn't have access to these functions to use in our code). As long as these modules are distributed with the standard installation of Python, all we have to do to access their functions is to invoke them with the word import. For instance, here we'll import the random module, which will allow us to run a simulation that involves drawing random values.

import random
Note that when you import a module, no output is typically displayed. Everything should be good as long as you don't see any errors.

Now we're going to do something similar with the copy module. But instead of importing the entire module, we're just going to ask Python to import the specific function called copy (I know, it's a little confusing to have a function with the same name as the module.)

from copy import copy
In statements like these, the word after from is the name of the module, and the word after import is the name of the function you want.

Next, we need to set up some basic conditions for our simulation. First, let's define the directions that individuals can move. To keep things concise, we'll abbreviate up as u, down as d, left as l, and right as r.

dirs = ["u","d","l","r"]
Next, let's set the number of days we want to simulate.

days = 10
We'll also set a starting position for each individual as [0,0].

pos = [0,0]
The notation we'll use for an individual's position in the grid is to have the first number in the pair represent the horizontal axis, and the second number represent the vertical axis. Positive values indicate positions up or to the right of where we started, and negative values indicate positions down or to the left of where we started.

We'll also want to keep an ongoing log of where the individual is each day, so we'll start an empty list called posLog.

posLog = []
The last step in our setup will be to make the individual's starting position the first entry in our position log.

posLog.append( copy(pos) )
posLog
[[0, 0]]

This is the first place where we've used the copy() function from the copy module. The reason we're using it is because we're going to update the position of our individual (recorded in pos) each day, but we want their starting position to be fixed at [0,0]. If we didn't use the copy() function, each time we changed pos, the values we added to posLog would also change.

If this doesn't make sense, try taking a look back at the notes from last week. Or just make up an example and try it yourself! Create a small list, then make it an entry in a bigger list without using copy(). Now, go back and change the values of the small list, and see what the big list looks like.

Also, take a look at posLog currently. What is it? It's a list of lists! But so far, it only has one list in it - our starting position. As we keep going, it will hold a whole series of lists, containing the coordinates for each position our individual has moved.

Simulation
Here's where the rubber meets the road. We need to draw a random direction of movement for each day in our simulation, and update our position accordingly. I'll give you some hints about how to set this up, but you'll need to fill in most of it. Anywhere you see ... indicates code that you need to write.

for num in range(10):  # Loop over the specified number of days
    move = random.choice(dirs) # Randomly draws a direction - u, d, l, or r
    if move == "u": # Test what direction was drawn and update position accordingly
        print("Direction is up.")
        pos[1]+=1
    elif move == "d":
        print("Direction is down")
        pos[1]-=1
    elif move == "l":
        print("Direction is left")
        pos[0]-=1
    elif move == "r":
        print("Direction is right")
        pos[0]+=1
    else:
        print("Something's wrong! Direction is not u, d, l, or r.")
    posLog.append( copy(pos) )
Direction is left
Direction is right
Direction is right
Direction is right
Direction is up.
Direction is left
Direction is right
Direction is down
Direction is up.
Direction is up.

Summary
Now, I'm going to include a custom function that takes all the pairs of coordinates in posLog and makes a little map drawn entirely with ascii (plain text) characters. Don't worry too much about this function for now, we'll just use it. Very soon, we'll look at how to write our own functions.

def drawMap(posLog):
    """Function to draw an ascii map."""
    
    map = []
​
    absMax = 0
    for pos in posLog:
        if abs(pos[0]) > absMax:
            absMax = abs(pos[0])
        if abs(pos[1]) > absMax:
            absMax = abs(pos[1])
    size = (absMax * 2) + 1
​
    for _ in range(size):
        map.append([])
​
    for row in map:
        for i in range(size):
            row.append("-")
​
    for pos in posLog:
        map[-1*(pos[1]+absMax+1)][pos[0]+absMax] = "*"
​
    for row in map:
        rStr = ""
        for c in row:
            rStr += str(c)
        print(rStr)
Now let's draw a map! We'll execute our new function and pass it the position log as an argument.

drawMap(posLog)
----*
---**
-****
-----
-----
In these maps, the dashes (-) represent the entire landscape background, and the asterisks (*) represent the grid cells visited by the individual. They also start right in the middle.

Now, look at the last position of the individual (i.e., the last entry in posLog - hint, try posLog[-1]). Write some code to calculate how far away this is from where the individual started (i.e., [0,0]). Remember the Pythagorean theorem? If not, there's always Wikipedia.

posLog[-1]
[2, 2]
# Write code here to calculate distance from the starting point - [0,0].
import math
p1 = [0,0]
p2 = posLog[-1]
distance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )
​
print(distance)

2.8284271247461903

How do the final distances that individuals have moved from where they originally started compare to the number of days they've been moving?
  
 - The final distance that the individuals moved is shorter than the number of days, 10, of movement. 
​
Run your simulations a bunch of times and record the distances. To rerun the simulation, first select the "Cell" dropdown menu from the top, then select "All Output", then select "Clear".
[1,9]
[2,3]
[0,2]
[0,0]
[2,2]
​
What if you collected actual data from your species of interest and their final positions after __10 days__ were represented by the following coordinates. Can the random model of movement explain these data well?  
​
- The final distance of this set of data is around 2.83 wich is similar to the final distances the simulation gave. Therefore, the random model of movment can explain this data set. 
​
- [1,1]
- [1,3]
- [-1,5]
- [2,6]
- [1,-1]
- [2,4]
- [-2,4]
- [1,9]
- [2,4]
- [-2,2]
