/usr/bin/env python

import random
from copy import copy
dirs = ["u","u","u","u","d","l","r"]
days = 10
pos = [0,0]
posLog = [10]
posLog.append( copy(pos) )
for day in range(10):  # Loop over the specified number of days
    move = random.choice(dirs) # Randomly draws a direction - u, d, l, or r
    if move == "u": # Test what direction was drawn and update position accordingly
       pos[1] = int(pos[1]) + 1
    elif move == "d":
        pos[1] = int(pos[1]) - 1
    elif move == "l":
        pos[0] = int(pos[0]) + 1
    elif move == "r"
        pos[0] = int(pos[0]) - 1
    else:
        print("Something's wrong! Direction is not u, d, l, or r.")
    posLog.append( copy(pos) )

dayten = posLog[10]
hyp = dayten[0]**2 + dayten[1]**2
hyp**(0.5) 
def drawMap(posLog):
    """Function to draw an ascii map."""
    
    map = []
    absMax = 0
    for pos in posLog:
        if abs(pos[0]) > absMax:
            absMax = abs(pos[0])
        if abs(pos[1]) > absMax:
            absMax = abs(pos[1])
    size = (absMax * 2) + 1
    for _ in range(size):
        map.append([])
    for row in map:
        for i in range(size):
            row.append("-")
    for pos in posLog:
        map[-1*(pos[1]+absMax+1)][pos[0]+absMax] = "*"
    for row in map:
        rStr = ""
        for c in row:
            rStr += str(c)
        print(rStr)
drawMap(posLog)
#Now let's draw a map! We'll execute our new function and pass it the position
#log as an argument.
drawMap(posLog)
#Now, look at the last position of the individual
posLog[-1]
[7,3]
#import mathematical functions
import math
#define origin and point 2
p1 = [0,0]
p2 = posLog[-1]
#use pythagorean theorem to calculate distance
distance = math.sqrt(((p1[0]-p2[0]**2)+((p1[7]-p2[3])**2)) 
print(distance)
10
# Run simulation for 
[1,1]
[1,3]
[-1,5]
[2,6]
[1,-1]
[2,4]
[-2,4]
[1,9]
[2,4]
[-2,2]
#A random model seems to be an acceptable way to calculate data 
